#include <string.h>
#include <stdio.h>
#include <stdlib.h>

#include "file_IO.h"
#include "global_variables.h"




//kan ta inn fleire argument om ein treng det:
int write_backup_master(char* filename, int* elevator_status, int* elevator_floor, struct ORDER_QUEUE* root){
    FILE* fp;

    fp = fopen("filename", "w");

    if (fp == NULL) {
      printf("Error: couldn't open %s for writing\n",filename);
      return -1;
    }
    fclose(fp);
    
    fp = fopen("filename","a");
    
	fprintf(fp,"$#");
	for(int i = 0 ; i < N_ELEVATORS ; i++){
    	fprintf(fp,"%i#%i#",elevator_status[i],elevator_floor[i]);
    }
    fprintf(fp,"$#");
    
    struct ORDER_QUEUE* temp = root;
    
    while(temp->next != NULL){
    	temp=temp->next;
    	fprintf(fp,"%i#%i#",temp->floor,temp->direction);
    }
    fclose(fp);
   
    return 1;
}




int retrieve_backup_master(char* filename, int* elevator_status, int* elevator_floor, struct ORDER_QUEUE* root){

  FILE *fp;
  char buffer[1024];
  char* variable_string;
  variable_string= NULL;
   
  fp = fopen(filename, "r");
  if (fp == NULL) {
    printf("Error: couldn't open %s for reading.\n", filename);
    return -1;
  }
  
  
  
  if(gets(buffer, sizeof(buffer), fp)!=NULL){
  
    variable_string = strtok( buffer, "#");
    if(variable_string[0]!='$'){
    	printf("Error: error in backup file %s when retreiving backup\n", filename); 
    }
    strcpy(variable_string,"-1");
    
    int linkedlist_check=0;
    int j = 0;
    while(variable_string!=NULL){
    	variable_string = strtok( NULL, "#");
    	if(variable_string=='$')
    		break;
    	
    	elevator_status[j]=atoi(variable_string);
    	
    	variable_string = strtok( NULL, "#");
    	if(variable_string=='$')
    		break;
    	elevator_status[j]=atoi(variable_string);
    	
    	j=j+1;
    	if(j >= N_ELEVATORS){
    		printf("Error: j bigger than N_ELEVATORS in backup file: %s \n",filename);
    		return -1;
    	}
    		
    }
    
    //FLEIRE HEISAR?? FORTSETT I SLUTTEN TIL DU NÃ…R variable_string==NULL
  
  }
       
  fclose(fp);
  return 1;
}
